       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jiaqi Lou <jiaqilou@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
Many CPs (almost all)

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In the thread.h I have:
    struct hash sup_page_table;
This is the supplemental page table in each thread

In page_table.h I have:
struct sup_page_table_entry { // entry for each sup_page_table
	void* user_vaddr; // user virtual address

	bool pinned; // if it's pinned
	int type; //type of this entry
	bool is_loaded; // if this entry has been loaded
	bool writable;

	struct file* file; // file that the page use
	size_t read_bytes;
	size_t zero_bytes;
	size_t offset;

	size_t swap_index;
	struct hash_elem elem;

	uint64_t access_time;
	bool dirty;
	bool accessed;
};

In frame_table.h I have:
struct list frame_table; frame table to store frames

struct frame_table_entry { // entry in frame table
	uint32_t* frame;
	struct thread* owner;
	struct sup_page_table_entry* aux; // matched spte
	struct list_elem elem;
};



---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
	If a page_fault occures, the function passes a fault address.
After checking if the address is valid, we can then round down the address and try to 
find out if the sup page entry exists already. If it is, then it should be in Reclamation.
If not, we need to create a sup_page_entry for it. After getting the spte, we need to
find a frame that maps with the spte. If there is not free frame avaliable,
evict a frame for this spte. 

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?
	Even for the kernel code, the access to User stack needs user virtual address, and the 
Syscall and page fault do check if the accessing address is valid user virtual address. 
After the user virtual address is checked, we need to find a spte that maps with the address,
and this spte maps with a frame. 


---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

	Mapping between frame and spte should be donw sequentially by using lock. HOwever, it's very rare that
more than one process map frame and spte at same time.
	If there are more than two new frame avaliable, the two processes can directly allocate a page. THen
the two processess maps their own frame and spte one by one.
	If there is only one new frame, only one process can directly allocate a page. Another 
process needs to get a free frame via eviction. And the two processes maps the new frame and spte
sequentially.
	If there is no new frame. Both processes need to get frame by eviction. And then maps frame and spte
sequentially.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Because this is what pintos_guide_2016 says. And it makes sence to do in this way to avoid 
bad access.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In the swap.h I have:
static struct block* global_swap_block; // block that page are written and read

static struct bitmap *swap_map; //this bitmap is used to represent if 
						contiguous sectors on disk are free or busy


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

	Basically I pick up the first frame that can be swapped out to be swapped.
In detail, I loop through the frame table infinitely. For each loop, I check 
if any frame is not accessed, nor pinned. If any frame is not, it will be swapped
out(evicted). 

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

	When the process P obtains this new frame, the frame table entry will set 
Process P as its owner, and the spte of P will maps with the frame table entry.
The process Q will delete its spte to this frame, and process Q has no relation 
with this frame at all.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

	I was guided by pintos guide to do all the pointer checking. So whether
an invalid virtual address can be accepted depends on whether its a user 
virtual address, whether it's within 32 bits of esp, whether it grows beyond
8 Mb stack. And even if the pointer is valid for page fault, it will need to check 
if a spte has already been created. If not, then extend stack.
 


---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

	For each resource, such as the mapping between spte and frame, there is
only one lock. And after one thread obtains one lock, this thread will not
acquire any lock until it release the lock. And if the thread is dead 
accidently with holding a lock. It will release all the lock. 

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

	In the process of selecting which frame should be evicted, I pick the first
frame that is not accessed nor pinned. And when process Q is accessing
or modifying to a frame, it marks the frame to be pinned, and process
P will ignore it until process Q is done with everything in syscall or exception.
	TO avoid the race, when the process P access the frame that used to be acquired
by process Q by eviction. It will set is_loaded, and the process Q has to reload the
file through page_fault.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

	For reading from a file, the Process P will set pin before start reading, and 
set it back after reading. And like I mentioned in the B6, the process Q
cannot evict a frame that is pinned. This will avoid process P to be
interfered during reading file.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

	The process will never swap out pinned frame, and if the frame is swapped
out, the process that used to own the frame can reload the frame back in 
through page fault.
	If the accessed address is invlid, use exit(-1).

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

	I try to use as less lock as possible, as long as my code works by using
boolean value such as pinned and accessed. 

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In thread.h, I have:
int mapid;   //the most current id for mmap file, like fd for file
struct list mmap_list; // the whole list of mmap file. like the file list

struct mmap_file {// like the struct for file
  struct sup_page_table_entry *spte; // spte related to this mmap file
  int mapid; // id of this mmap file like the fd for file
  struct list_elem elem;
};

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

	Adding mmap file will not allocate a page immediately. Instead, it will
mark create spte and mark its type as MMAP. And when the process is accessing
this address, it will go into page_fault() and go to code for MMAP. 
	When the code goes into page fault, since the spte is created before,
it will go into reclaim page. Here, the swap pages and other pages are
different. THe swap page only needs to link spte and frame, but the other
pages need to read file and then link. For the eviction, the mmap swap needs
to do munmap while the swap pages don't.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

	THe sup page table is a hash table. THis means that if two files overlap
with the same segment, they will return the same hash value and will be put
to the same place. THen it means that the older spte will be taken by the new
spte. 


---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

	MMAP file behaves exactly the same as SWAP file before fetching data.
So when page fault occures, the two can share the same code, and they 
use different code in page reclaim by using case. And In clearing and 
releasing data, the MMAP need do extra by munmap using same way.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
